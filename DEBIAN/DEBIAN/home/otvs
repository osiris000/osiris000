#!/bin/bash

# Valores predeterminados
x=176
y=175
width=640
height=380
framerate=10
threads=4
youtube1="URL A YOUTBE"
youtube2="rtmp://a.rtmp.youtube.com/live2/svvb-yk73-asfv-0krs-5v57"
prefix_screen="osiristvscreen"
output=$youtube2
quality="medium"
screen_select=false
prompt=false
record=false


ffmpegDir="${OSIRIS000_BIN}/com/datas/ffmpeg"
progress_file="${ffmpegDir}/progress_process.txt"

# Función para mostrar el uso del script
function usage() {
    echo "Uso: $0 [-screen] [-framerate FPS] [-output URL] [-quality low|medium|high] [-record FILE] [-prompt]"
    exit 1
}

# Obtener la ruta completa del script
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")

# Cambiar al directorio del script
cd "$SCRIPT_DIR" || { echo "Failed to change directory to $SCRIPT_DIR"; exit 1; }

# Procesar argumentos de línea de comando
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -screen) screen_select=true ;;
        -framerate) framerate="$2"; shift ;;
        -output) output="$2"; shift ;;
        -quality) quality="$2"; shift ;;
        -record) output="$2"; shift; record=true ;;
        -prompt) prompt=true ;;
        *) usage ;;
    esac
    shift
done



# Función para pedir valores interactivamente
function prompt_values() {
    echo "Introduce los valores para la configuración:"
    read -p "Resolución X (por defecto: $x): " input_x
    read -p "Resolución Y (por defecto: $y): " input_y
    read -p "Ancho (por defecto: $width): " input_width
    read -p "Alto (por defecto: $height): " input_height
    read -p "Framerate (por defecto: $framerate): " input_framerate
    read -p "Output URL (por defecto: $output): " input_output
    read -p "Número de hilos (por defecto: $threads): " input_threads
    read -p "Calidad (low, medium, high) (por defecto: $quality): " input_quality

    # Aplicar valores si se proporcionan, de lo contrario usar los predeterminados
    x=${input_x:-$x}
    y=${input_y:-$y}
    width=${input_width:-$width}
    height=${input_height:-$height}
    framerate=${input_framerate:-$framerate}
    output=${input_output:-$output}
    threads=${input_threads:-$threads}
    quality=${input_quality:-$quality}
}

# Función para detener el proceso ffmpeg en ejecución
function stop_ffmpeg() {
    if [ -n "$ffmpeg_pid" ]; then
        echo "Deteniendo el proceso ffmpeg con PID $ffmpeg_pid..."
        kill -9 $ffmpeg_pid
        wait $ffmpeg_pid 2>/dev/null
        echo "Proceso ffmpeg detenido."
    else
        echo "No existe proceso previo"
    fi
}

# Función para iniciar el proceso ffmpeg con los valores actuales
function start_ffmpeg() {

    # Asegúrate de que las dimensiones sean pares
    w=$width
    h=$height
    if [ $((w % 2)) -ne 0 ]; then
        w=$((w - 1))
    fi
    if [ $((h % 2)) -ne 0 ]; then
        h=$((h - 1))
    fi

    # Configuración de calidad
    case $quality in
        low)
            base_video_bitrate=1000
            base_audio_bitrate=64
            ;;
        medium)
            base_video_bitrate=3000
            base_audio_bitrate=96
            ;;
        high)
            base_video_bitrate=5000
            base_audio_bitrate=128
            ;;
        *)
            echo "Calidad no reconocida: $quality"
            usage
            ;;
    esac

    # Resolución base para 720p
    base_width=1280
    base_height=720

    # Calcula el área base y la nueva área
    base_area=$((base_width * base_height))
    new_area=$((w * h))

    # Calcula los nuevos bit rates proporcionalmente (en bits por segundo)
    video_bitrate=$(echo "$base_video_bitrate * $new_area / $base_area" | bc)
    minrate=$(echo "$video_bitrate * 83 / 100" | bc)

    # Convertir los bit rates de bits por segundo a kilobits por segundo
    video_bitrate="${video_bitrate}k"
    minrate="${minrate}k"
    audio_bitrate="${base_audio_bitrate}k"

    # Información de salida
    echo "Resolución de entrada: ${w}x${h}"
    echo "Bit rate de video calculado: $video_bitrate"
    echo "Bit rate de video mínimo (minrate): $minrate"
    echo "Bit rate de audio: $audio_bitrate"
    echo "Output: ${output}"
    echo "Threads utilizados: ${threads}"
    echo "Framerate: ${framerate}"
    echo "Formato de salida: FLV"
    echo "Iniciando el proceso de grabación y streaming..."
    ffmpeg -loglevel warning -y -re -f x11grab -thread_queue_size 256 -video_size ${w}x${h} \
    -framerate ${framerate} -i :0.0+${x},${y} \
    -f pulse -thread_queue_size 256 \
    -i alsa_output.pci-0000_00_1b.0.stereo-fallback.monitor \
    -f pulse -thread_queue_size 256 \
    -i alsa_input.usb-C-Media_Electronics_Inc._USB_Advanced_Audio_Device-00.stereo-fallback \
    -filter_complex "[0:v]scale='if(gt(iw/ih,1280/720),min(iw,1280),-2)':'if(gt(iw/ih,1280/720),-2,min(ih,720))',pad=1280:720:(ow-iw)/2:(oh-ih)/2:color=black[bg]; \
    [1:a][2:a]amerge=inputs=2[audio]" \
    -map "[bg]" -map "[audio]" \
    -ac 2 -ar 44100 \
    -vsync 0 -preset ultrafast \
    -tune zerolatency -threads ${threads} \
    -b:a $audio_bitrate -b:v $video_bitrate -bufsize $video_bitrate -maxrate $video_bitrate -minrate $minrate \
    -c:v libx264 -c:a aac -pix_fmt yuv420p \
    -g 10 -keyint_min 10 \
    -f flv ${output} \
    -fflags nobuffer+genpts+igndts+discardcorrupt \
    -flags low_delay -max_delay 0 -reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 2 \
    -metadata "text=${prefix_screen}" -progress $progress_file >/dev/null 2>&1 &
    ffmpeg_pid=$!
    disown
    echo "ffmpeg PID: $ffmpeg_pid"
}

function screen() {
    # Ejecutar el script de Python y capturar la salida
    echo "#################################"
    echo "-------Osiristv screen-----------"
    echo "-------Seleccionar pantalla------"
    rect=$(python3 $OSIRIS000_BIN/com/selecttv.py)
    echo "---------------------------------"
    echo "#################################"
    echo $rect
    echo "#################################"

    # Verificar si la selección se realizó o si se cerró la ventana sin seleccionar
    if [ -z "$rect" ]; then
        echo "Selection cancelled or window closed"
    fi
    # Dividir los valores de la salida
    IFS=',' read -r x y width height <<< "$rect"
    echo "Using values: x=$x, y=$y, width=$width, height=$height"

}

# Si se ha pasado la opción -prompt, solicitar los valores interactivamente
if [ "$prompt" = true ]; then
    while true; do
        screen
        prompt_values
        stop_ffmpeg
        start_ffmpeg
        input=""
            while [ "${input,,}" != "new" ]; do
            read -p "Escriba NEW para nuevo streaming: " input
        done
    done
else
    # Si no se usa -prompt, simplemente iniciar el streaming
    screen
    stop_ffmpeg
    start_ffmpeg
fi

