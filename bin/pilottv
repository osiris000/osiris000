#!/bin/bash
# pilottv
echo "STARTING PILOTTV"
# Variables de configuración
SCRIPT_NAME="pilottv"
PREFIX_TV="osiris-pilot-tv"
PREFIX_SCREEN="osiristvscreen"
#youtube 1
OUTPUT_URL=${1:-"rtmp://a.rtmp.youtube.com/live2/g8pm-sau2-va7c-tyg5-1ppy"}
#youtube 2
#OUTPUT_URL=${1:-"rtmp://a.rtmp.youtube.com/live2/svvb-yk73-asfv-0krs-5v57"}
INSPECTOR_TIME=${2:-3}
FFMPEG_FILE_PILOT="${OSIRIS000_BIN}/com/datas/ffmpeg/intro.mp4"
FFMPEG_CMD="ffmpeg -re -stream_loop -1 -i com/datas/ffmpeg/intro.mp4  \
    -c:v libx264 -preset ultrafast -crf 18 -b:v 5000k -maxrate 5000k \
    -bufsize 10000k -pix_fmt yuv420p -g 2 -metadata text=$PREFIX_TV \
    -f flv $OUTPUT_URL"

# Obtener la ruta completa del script
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")

# Cambiar al directorio del script
cd "$SCRIPT_DIR" || { echo "Failed to change directory to $SCRIPT_DIR"; exit 1; }

# Función para obtener los PIDs de los procesos FFmpeg que contienen "osiristvscreen"
get_osiristvscreen_pids() {
    ps aux | grep '[f]fmpeg' | grep $PREFIX_SCREEN | awk '{print $2}'
}

# Función para obtener los PIDs de los procesos FFmpeg que contienen "osiris-pilot-tv"
get_pilot_pids() {
    ps aux | grep '[f]fmpeg' | grep $PREFIX_TV | awk '{print $2}'
}


get_hls_pids(){

    ps aux | grep '[f]fmpeg' | grep "osiristv-hls-*" | awk '{print $2}'


}


# Función para iniciar FFmpeg con los parámetros iniciales
start_ffmpeg() {
    echo "Iniciando FFmpeg (osiris-pilot-tv) con parámetros por defecto..."
    echo "$FFMPEG_CMD"
    # Ejecutar el comando FFmpeg en segundo plano
    $FFMPEG_CMD >/dev/null  2>&1 &
}

# Función para verificar si un PID aún está activo
is_pid_active() {
    ps -p "$1" > /dev/null 2>&1
}

# Función para matar un proceso de forma ordenada y luego forzarlo si es necesario
kill_process() {
    local pid=$1
    echo "Intentando matar el proceso con PID: $pid de forma ordenada..."
    kill "$pid"
    sleep 2

    if is_pid_active "$pid"; then
        echo "El proceso $pid sigue activo, intentándolo de nuevo..."
        kill -15 "$pid"
        sleep 2

        if is_pid_active "$pid"; then
            echo "No se pudo matar el proceso $pid, forzando terminación con sudo..."
            sudo kill -9 "$pid"
        fi
    fi
}

# Bucle principal de inspección
while true; do
    clear
    echo "PILOT TV START"
    echo " ..."
    echo "Comprobando procesos ..."


    # Obtener procesos HLS
    hls_pids=$(get_hls_pids)
    pid_hls_count=$(echo "$hls_pids" | wc -w)
    if [ "$pid_hls_count" -gt 0 ]; then

    # A partir de aquí se comprueba que no haya canales hls duplicados osiristv-hls-* donde * es el canal
    #PENDIENTE

        echo "Procesos HLS encontrados: ${pid_hls_count}"
	echo "[${hls_pids}]"

    else
        echo "No se encontraron procesos HLS"
    fi
    # Obtener los PIDs de los procesos FFmpeg con "osiristvscreen" en su comando
    ffmpeg_pids=$(get_osiristvscreen_pids)
    pid_count=$(echo "$ffmpeg_pids" | wc -w)

    # Obtener los PIDs de los procesos FFmpeg con "osiris-pilot-tv"
    pilot_pids=$(get_pilot_pids)

    if [ "$pid_count" -eq 0 ]; then
        # No hay procesos osiristvscreen
        echo "No se encontraron procesos SCREEN."

        if [ -z "$pilot_pids" ]; then
            # No hay procesos osiris-pilot-tv, iniciar uno nuevo
            echo "No se encontraron procesos de respaldo PILOT  en ejecución."
	    echo "Iniciando..."
            start_ffmpeg
        else
            echo "Proceso PILOT en ejecución."
        fi
    else
        # Hay procesos osiristvscreen
        echo "Procesos SCREEN-TV detectados: $pid_count"
	echo "[$ffmpeg_pids]"

        # Matar los procesos osiris-pilot-tv si existen
        if [ ! -z "$pilot_pids" ]; then
            echo "Proceso PILOT: $pilot_pids"
            for pid in $pilot_pids; do
                if is_pid_active "$pid"; then
                    echo "Matando proceso PILOT: $pid..."
                    kill_process "$pid"
                fi
            done
        fi

        # Verificar y manejar múltiples procesos osiristvscreen
        if [ "$pid_count" -gt 1 ]; then
            echo "Se encontraron múltiples procesos SCREEN-TV:"
	    echo "$ffmpeg_pids"
            latest_pid=$(echo "$ffmpeg_pids" | sort -n | tail -n 1)

            for pid in $ffmpeg_pids; do
                if [ "$pid" -ne "$latest_pid" ]; then
                    echo "Matando duplicado SCREEN-TV: $pid"
                    kill_process "$pid"
                fi
            done
        else
            echo "Proceso SCREEN-TV activo: $ffmpeg_pids"
        fi
    fi

    sleep $INSPECTOR_TIME  # Esperar antes de la próxima verificación
done
