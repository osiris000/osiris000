#!/usr/bin/env python3.9
# Name: dskv  [Reproductor de Vídeo]
# Version: 0.1
# Language: Python
# Requeriments sys, argparse, subprocess, PyQt5, yt-dlp
# -*- coding: utf-8 -*-

import sys
import argparse
import subprocess
from functools import partial
from PyQt5.QtCore import QEvent, QUrl, Qt, QThread, pyqtSignal, QObject
from PyQt5.QtWidgets import (QApplication, QHBoxLayout, QMainWindow,
                             QWidget, QPushButton, QSlider,
                             QVBoxLayout, QFileDialog, QLabel, QMessageBox, QLineEdit, QInputDialog, QCheckBox, QProgressBar)
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer, QCamera, QCameraInfo
from PyQt5.QtMultimediaWidgets import QVideoWidget

class UrlLoader(QThread):
    progress = pyqtSignal(int)
    finished = pyqtSignal(str)

    def __init__(self, url, format_filter):
        super().__init__()
        self.url = url
        self.format_filter = format_filter

    def run(self):
        timeout = 30  
        try:
            result = subprocess.run(
                ["yt-dlp", "--get-url", "-f", self.format_filter, "--socket-timeout", str(timeout), self.url],
                capture_output=True, text=True, check=True, timeout=timeout
            )
            link = result.stdout.strip()
            if link:
                self.finished.emit(link)
            else:
                self.finished.emit("Error: No se obtuvo un enlace válido.")
        except subprocess.CalledProcessError as e:
            self.finished.emit(f"Error: {e.stderr.strip()}")
        except subprocess.TimeoutExpired:
            self.finished.emit("Error: El proceso superó el tiempo de espera.")

class MainWindow(QMainWindow):
    def __init__(self, video_source=None):
        super().__init__()

        self.widget = QWidget(self)
        self.layout = QVBoxLayout()
        self.bottom_layout = QHBoxLayout()

        self.media_player = QMediaPlayer(self)
        self.camera = None  
        self.video_widget = None  

        self.search_button = QPushButton("Archivo", self)
        self.url_button = QPushButton("Abrir URL", self)
        self.webcam_button = QPushButton("Webcam", self)
        self.play_pause_button = QPushButton("Play", self)  
        self.title_label = QLabel("", self)
        self.title_label.setStyleSheet('QLabel {background-color: black; color: green;}')
        self.title_label.setFixedWidth(220)
        self.volume_label = QLabel("VOLUMEN:", self)

        self.progress_bar = QProgressBar(self)
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setVisible(False)

        self.seek_slider = QSlider(Qt.Horizontal)
        self.volume_slider = QSlider(Qt.Horizontal)
        self.volume_slider.setRange(0, 100)
        self.volume_slider.setValue(50)
        self.volume_slider.valueChanged.connect(self.media_player.setVolume)
        self.seek_slider.sliderMoved.connect(self.media_player.setPosition)

        self.use_yt_dlp_checkbox = QCheckBox("Usar yt-dlp para url", self)
        self.format_filter_input = QLineEdit("[height<720]/best", self)
        self.format_filter_input.setFixedWidth(120)
        self.auto_play_checkbox = QCheckBox("Reproducir automáticamente al cambiar", self)
        self.loop_checkbox = QCheckBox("Repetir en bucle", self)
        self.change_source_notification_checkbox = QCheckBox("Mostrar aviso al cambiar de fuente", self)

        self.media_player.positionChanged.connect(self.seek_slider.setValue)
        self.media_player.durationChanged.connect(self.update_slider_range)
        self.media_player.stateChanged.connect(self.state_changed)
        self.media_player.mediaStatusChanged.connect(self.check_end_of_media)
        self.play_pause_button.clicked.connect(self.play_pause_clicked)

        self.layout.addWidget(self.title_label)
        self.layout.addLayout(self.bottom_layout)
        self.bottom_layout.addWidget(self.search_button)
        self.bottom_layout.addWidget(self.url_button)
        self.bottom_layout.addWidget(self.webcam_button)
        self.bottom_layout.addWidget(self.play_pause_button)  
        self.bottom_layout.addWidget(self.volume_label)
        self.bottom_layout.addWidget(self.volume_slider)
        self.layout.addWidget(self.auto_play_checkbox)
        self.layout.addWidget(self.loop_checkbox)
        self.layout.addWidget(self.change_source_notification_checkbox)

        # Agrupando la casilla de ytdlp y la entrada de formato en un layout horizontal
        yt_dlp_layout = QHBoxLayout()
        yt_dlp_layout.addWidget(self.use_yt_dlp_checkbox)
        yt_dlp_layout.addWidget(self.format_filter_input)
        # Añadiendo estiramiento al checkbox para que ocupe el espacio disponible
        yt_dlp_layout.addStretch()
        # Se añade el layout horizontal al layout vertical
        self.layout.addLayout(yt_dlp_layout) 

        self.layout.addWidget(self.seek_slider)
        self.layout.addWidget(self.progress_bar)

        self.search_button.clicked.connect(self.open_file)
        self.url_button.clicked.connect(self.open_url_dialog)
        self.webcam_button.clicked.connect(self.open_webcam)

        self.setWindowTitle("Reproductor de video")
        self.resize(800, 600)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.bottom_layout.setContentsMargins(0, 0, 0, 0)
        self.widget.setLayout(self.layout)
        self.setCentralWidget(self.widget)

        if video_source:
            self.set_video_source(video_source)
        else:
            self.set_video_source("webcam")

    def play_pause_clicked(self):
        if self.media_player.state() == QMediaPlayer.PlayingState:
            self.media_player.pause()
            self.play_pause_button.setText("Play")
        else:
            self.media_player.play()
            self.play_pause_button.setText("Pausa")

    def recreate_video_widget(self):
        if self.video_widget:
            self.video_widget.deleteLater()
        self.video_widget = QVideoWidget(self)
        self.video_widget.setStyleSheet("background-color: black;")
        self.media_player.setVideoOutput(self.video_widget)
        self.layout.insertWidget(0, self.video_widget)

    def set_video_source(self, source):
        if self.camera is not None:
            self.camera.stop()
        self.media_player.stop()
        self.media_player.setMedia(QMediaContent())

        if self.change_source_notification_checkbox.isChecked():
            QMessageBox.information(self, "Cambio de fuente", f"Cambiando a fuente: {source}")

        self.recreate_video_widget()

        if source == "webcam":
            self.start_camera()
        elif source:
            url = QUrl.fromLocalFile(source) if not source.startswith('http') else QUrl(source)
            if self.use_yt_dlp_checkbox.isChecked() and source.startswith('http'):
                self.progress_bar.setVisible(True)
                self.loader = UrlLoader(source, self.format_filter_input.text())
                self.loader.finished.connect(self.handle_url_result)
                self.loader.start()
            else:
                self.media_player.setMedia(QMediaContent(url))
                self.title_label.setText(f' VIDEO: {source.split("/")[-1]}')
                self.play_pause_button.setEnabled(True)
                self.play_pause_button.setText("Play") 
                if self.auto_play_checkbox.isChecked():
                    self.media_player.play()
                    self.play_pause_button.setText("Pausa")

        self.video_widget.show()

    def handle_url_result(self, link):
        self.progress_bar.setVisible(False)
        if link.startswith("Error"):
            QMessageBox.warning(self, "Error", link)
        else:
            url = QUrl(link)
            self.media_player.setMedia(QMediaContent(url))
            self.title_label.setText(f' VIDEO: {link.split("/")[-1]}')
            self.play_pause_button.setEnabled(True)
            self.play_pause_button.setText("Play")  

            if self.auto_play_checkbox.isChecked():
                self.media_player.play()
                self.play_pause_button.setText("Pausa")

    def start_camera(self):
        self.camera = QCamera(QCameraInfo.defaultCamera())
        self.camera.setViewfinder(self.video_widget)
        self.camera.start()
        self.title_label.setText('WEBCAM')
        self.play_pause_button.setEnabled(False) 

    def open_webcam(self):
        self.set_video_source("webcam")

    def open_url_dialog(self):
        url, ok = QInputDialog.getText(self, "Abrir URL", "Ingresa la URL del video:")
        if ok and url:
            self.set_video_source(url)

    def open_file(self):
        file_name, _ = QFileDialog.getOpenFileName(self, "Abrir archivo de video")
        if file_name:
            self.set_video_source(file_name)

    def state_changed(self, state):
        if state == QMediaPlayer.StoppedState:
            if self.loop_checkbox.isChecked():
                self.media_player.play()
                self.play_pause_button.setText("Pausa")

    def check_end_of_media(self, status):
        if status == QMediaPlayer.EndOfMedia:
            if self.loop_checkbox.isChecked():
                self.media_player.play()
                self.play_pause_button.setText("Pausa")

    def update_slider_range(self, duration):
        self.seek_slider.setRange(0, duration)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--video', help='Ruta del video o URL')
    args = parser.parse_args()

    app = QApplication(sys.argv)
    main_window = MainWindow()  # No se pasa video_source aquí
    main_window.show()

    if args.video:
        main_window.set_video_source(args.video)
        main_window.play_pause_button.setEnabled(True) # Asegúrate que el botón esté habilitado.
        main_window.media_player.play()
        main_window.play_pause_button.setText("Pausa")

    sys.exit(app.exec_())
    
    
