#!/usr/bin/env python3
#!/usr/bin/env python3
import os
import json
import tkinter as tk
from tkinter import filedialog, messagebox, ttk

class ConfigPanel:
    def __init__(self, master):
        self.master = master
        master.title("Panel de Configuración Avanzado")
        master.geometry("700x600")

        self.tabs = ttk.Notebook(master)
        self.tabs.pack(fill=tk.BOTH, expand=True)

        # Lista para almacenar la configuración de cada pestaña
        self.config_data = [] 
        self.config_files = []

        self.create_toolbar()
        self.load_default_config()

    def create_toolbar(self):
        toolbar = tk.Frame(self.master, bd=1, relief=tk.RAISED)
        toolbar.pack(fill=tk.X)

        tk.Button(toolbar, text="Nuevo Config.", command=self.new_config_tab).pack(side=tk.LEFT, padx=2, pady=2)
        tk.Button(toolbar, text="Cargar Config.", command=self.load_config_file).pack(side=tk.LEFT, padx=2, pady=2)
        tk.Button(toolbar, text="Guardar Config.", command=self.save_current_config).pack(side=tk.LEFT, padx=2, pady=2)

    def load_default_config(self):
        default_file = "config.json"
        if os.path.exists(default_file):
            self.load_config(default_file)

    def new_config_tab(self, file_path=None, config_data=None):
        tab_name = file_path if file_path else f"Config {len(self.tabs.tabs()) + 1}"
        tab = ttk.Frame(self.tabs)
        self.tabs.add(tab, text=os.path.basename(tab_name))

        # Inicializar la configuración de la nueva pestaña
        self.config_data.append({
            "original": config_data.copy() if config_data else [],  # Almacena la configuración original
            "current": config_data.copy() if config_data else []  # Almacena la configuración actual
        })

        self.display_config_entries(tab, len(self.config_data) - 1)  # Usa el índice de la pestaña

        # Añadir botón para cerrar pestaña
        close_button = tk.Button(tab, text="✖", command=lambda: self.close_tab(len(self.config_data) - 1))
        close_button.place(relx=1.0, y=0, anchor='ne')

    def display_config_entries(self, tab, tab_index):  # Usa el índice de la pestaña
        def add_config_entry():
            new_entry = {
                "id": len(self.config_data[tab_index]["current"]) + 1,
                "name": "",  
                "alias": "",
                "path": "",
                "enabled": False
            }
            self.config_data[tab_index]["current"].append(new_entry)
            self.add_entry_to_ui(tab, new_entry, tab_index)

        tk.Button(tab, text="+ Agregar Campos", command=add_config_entry).pack(pady=5)

        for entry in self.config_data[tab_index]["current"]:
            self.add_entry_to_ui(tab, entry, tab_index)

    def add_entry_to_ui(self, parent, entry, tab_index):
        frame = tk.Frame(parent, bd=1, relief="solid", pady=5)
        frame.pack(fill="x", pady=5, padx=10)

        tk.Label(frame, text="Nombre:").pack(side="left", padx=5)
        name_entry = tk.Entry(frame, width=15)
        name_entry.insert(0, entry.get("name", ""))
        name_entry.pack(side="left", padx=5)
        name_entry.bind("<FocusOut>", lambda e: self.update_entry_field(tab_index, entry, "name", name_entry.get()))

        tk.Label(frame, text="Alias:").pack(side="left", padx=5)
        alias_entry = tk.Entry(frame, width=15)
        alias_entry.insert(0, entry.get("alias", ""))
        alias_entry.pack(side="left", padx=5)
        alias_entry.bind("<FocusOut>", lambda e: self.update_entry_field(tab_index, entry, "alias", alias_entry.get()))

        tk.Label(frame, text="Path:").pack(side="left", padx=5)
        path_entry = tk.Entry(frame, width=30)
        path_entry.insert(0, entry.get("path", ""))
        path_entry.pack(side="left", padx=5)
        path_entry.bind("<FocusOut>", lambda e: self.update_entry_field(tab_index, entry, "path", path_entry.get()))

        select_button = tk.Button(frame, text="Seleccionar", command=lambda: self.select_path(tab_index, entry, path_entry))
        select_button.pack(side="left", padx=5)

        enable_button = tk.Button(frame, text="   Habilitar   " if not entry.get("enabled", False) else "Deshabilitar", 
                                  command=lambda: self.toggle_enable(tab_index, entry, enable_button))
        enable_button.pack(side="left", padx=5)

        delete_button = tk.Button(frame, text="Eliminar", command=lambda: self.delete_entry(tab_index, entry, frame))
        delete_button.pack(side="left", padx=5)

    def select_path(self, tab_index, entry, path_entry):
        selected_path = filedialog.askopenfilename() if "archivo" in entry["name"].lower() else filedialog.askdirectory()
        if selected_path:
            entry["path"] = selected_path
            path_entry.delete(0, tk.END)
            path_entry.insert(0, selected_path)

    def update_entry_field(self, tab_index, entry, field_name, new_value):
        entry[field_name] = new_value

    def toggle_enable(self, tab_index, entry, button):
        entry["enabled"] = not entry.get("enabled", False)
        button.config(text="Deshabilitar" if entry["enabled"] else "   Habilitar   ")

    def delete_entry(self, tab_index, entry, frame):
        confirm = messagebox.askyesno("Confirmar Eliminación", "¿Estás seguro de que deseas eliminar esta configuración?")
        if confirm:
            self.config_data[tab_index]["current"].remove(entry)  # Elimina de la configuración actual
            frame.destroy()

    def load_config_file(self):
        file_path = filedialog.askopenfilename(title="Seleccione el archivo de configuración", filetypes=(("JSON files", "*.json"), ("all files", "*.*")))
        if file_path:
            self.load_config(file_path)

    def load_config(self, file_path):
        try:
            with open(file_path, "r") as f:
                config_data = json.load(f)
            self.config_files.append(file_path)

            # Crea un nuevo diccionario de configuración para la pestaña
            self.config_data.append({
                "original": config_data.copy(),  # Almacena la configuración original
                "current": config_data.copy()  # Almacena la configuración actual
            })

            # Añade la pestaña al Notebook
            tab_index = len(self.config_data) - 1  # Índice de la pestaña recién agregada
            tab = ttk.Frame(self.tabs)
            self.tabs.add(tab, text=os.path.basename(file_path))
            self.display_config_entries(tab, tab_index)

            # Añadir botón para cerrar pestaña
            close_button = tk.Button(tab, text="✖", command=lambda: self.close_tab(tab_index))
            close_button.place(relx=1.0, y=0, anchor='ne') 

        except json.JSONDecodeError:
            messagebox.showerror("Error", f"El archivo de configuración '{file_path}' no es un JSON válido.")
        except Exception as e:
            messagebox.showerror("Error", f"Error cargando configuración: {e}")

    def save_current_config(self):
        current_tab = self.tabs.select()
        tab_index = self.tabs.index(current_tab)

        # Compara la configuración actual con la configuración original
        if self.config_data[tab_index]["current"] != self.config_data[tab_index]["original"]:
            file_path = filedialog.asksaveasfilename(initialfile=f"Config {tab_index + 1}", defaultextension=".json", filetypes=(("JSON files", "*.json"), ("all files", "*.*")))
            if file_path:
                try:
                    json_data = json.dumps(self.config_data[tab_index]["current"], indent=4)
                    with open(file_path, "w") as f:
                        f.write(json_data)
                    messagebox.showinfo("Guardado", f"Configuración guardada en {file_path}")

                    # Actualizar la configuración original después de guardar
                    self.config_data[tab_index]["original"] = self.config_data[tab_index]["current"].copy()
                except (TypeError, ValueError) as e:
                    messagebox.showerror("Error de Guardado", f"Error al convertir datos a JSON: {e}")
        else:
            messagebox.showwarning("Advertencia", "No hay cambios para guardar en esta configuración.")

    def close_tab(self, tab_index):
        confirm = messagebox.askyesno("Confirmar Cierre", "¿Estás seguro de que deseas cerrar esta pestaña?")
        if confirm:
            self.tabs.forget(tab_index)
            del self.config_data[tab_index]

# Ejecución de la Aplicación
if __name__ == "__main__":
    root = tk.Tk()
    app = ConfigPanel(root)
    root.mainloop()
