#!/usr/bin/env python3.9
import sys
import os
import subprocess
import tempfile

from PyQt5.QtWidgets import (QApplication, QWidget, QVBoxLayout, QHBoxLayout,
                             QPushButton, QFileDialog, QListWidget,
                             QListWidgetItem, QLabel, QTextEdit, QCheckBox,
                             QLineEdit, QComboBox)
from PyQt5.QtCore import Qt, QThread, pyqtSignal


class FfmpegWorker(QThread):
    output_ready = pyqtSignal(str)
    finished = pyqtSignal(bool)  # Retorna un booleano si terminó sin errores

    def __init__(self, command):
        super().__init__()
        self.command = command

    def run(self):
        try:
            process = subprocess.Popen(self.command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
            while True:
                line = process.stdout.readline()
                if not line:
                    break
                self.output_ready.emit(line.strip())

            return_code = process.wait()
            if return_code == 0:
                self.finished.emit(True)
            else:
                self.output_ready.emit(f"Error: ffmpeg terminó con código {return_code}")
                self.finished.emit(False)

        except (OSError, subprocess.SubprocessError) as e:
            self.output_ready.emit(f"Error al ejecutar ffmpeg: {e}")
            self.finished.emit(False)


class VideoMerger(QWidget):

    def __init__(self):
        super().__init__()
        self.setWindowTitle("Unión de Videos")
        self.video_files = []
        self.temp_files = []
        self.current_video_idx = 0

        main_layout = QVBoxLayout()

        select_dir_button = QPushButton("Seleccionar Directorio")
        select_dir_button.clicked.connect(self.select_directory)
        main_layout.addWidget(select_dir_button)

        self.video_list = QListWidget()
        self.video_list.setSelectionMode(QListWidget.ExtendedSelection)
        self.video_list.setDragDropMode(QListWidget.InternalMove)
        main_layout.addWidget(self.video_list)

        output_layout = QHBoxLayout()
        output_label = QLabel("Nombre de salida:")
        self.output_name = QLineEdit("output.mp4")
        output_layout.addWidget(output_label)
        output_layout.addWidget(self.output_name)

        preset_label = QLabel("Preset:")
        self.preset_combo = QComboBox()
        self.preset_combo.addItems(["ultrafast", "superfast", "veryfast", "faster", "fast", "medium", "slow", "slower", "veryslow"])
        self.preset_combo.setCurrentText("medium")
        output_layout.addWidget(preset_label)
        output_layout.addWidget(self.preset_combo)

        main_layout.addLayout(output_layout)

        codec_layout = QHBoxLayout()
        video_codec_label = QLabel("Códec Video:")
        self.video_codec_combo = QComboBox()
        self.video_codec_combo.addItems(["libx264", "libx265", "mpeg4"])
        self.video_codec_combo.setCurrentText("libx264")
        codec_layout.addWidget(video_codec_label)
        codec_layout.addWidget(self.video_codec_combo)

        audio_codec_label = QLabel("Códec Audio:")
        self.audio_codec_combo = QComboBox()
        self.audio_codec_combo.addItems(["aac", "mp3", "ac3"])
        self.audio_codec_combo.setCurrentText("aac")
        codec_layout.addWidget(audio_codec_label)
        codec_layout.addWidget(self.audio_codec_combo)

        main_layout.addLayout(codec_layout)

        merge_button = QPushButton("Iniciar Unión")
        merge_button.setObjectName("Iniciar Unión")
        merge_button.clicked.connect(self.merge_videos)
        main_layout.addWidget(merge_button)

        self.output_panel = QTextEdit()
        self.output_panel.setReadOnly(True)
        main_layout.addWidget(self.output_panel)

        self.setLayout(main_layout)

    def select_directory(self):
        directory = QFileDialog.getExistingDirectory(self, "Seleccionar Directorio")
        if directory:
            self.video_files = []
            self.video_list.clear()
            for filename in sorted(os.listdir(directory)):
                if filename.lower().endswith(('.mp4', '.mov', '.avi', '.mkv')):
                    item = QListWidgetItem()

                    widget = QWidget()
                    layout = QHBoxLayout()
                    layout.setContentsMargins(5, 5, 5, 5)
                    layout.setSpacing(10)

                    checkbox = QCheckBox()
                    layout.addWidget(checkbox)

                    label = QLabel(filename)
                    label.setToolTip(filename)
                    layout.addWidget(label)

                    layout.addStretch()

                    widget.setLayout(layout)
                    widget.setFixedHeight(40)

                    item.setSizeHint(widget.sizeHint())

                    self.video_list.addItem(item)
                    self.video_list.setItemWidget(item, widget)

                    self.video_files.append(os.path.join(directory, filename))


    def merge_videos(self):
        # Recoger los videos en el orden seleccionado
        selected_videos = []
        for i in range(self.video_list.count()):
            item = self.video_list.item(i)  # Obtenemos el item en la lista
            checkbox = self.video_list.itemWidget(item).findChild(QCheckBox)  # Buscamos el checkbox dentro del item
            if checkbox.isChecked():  # Si está marcado, lo agregamos a la lista
                filename = self.video_files[i]
                selected_videos.append(filename)

        if not selected_videos:
            self.output_panel.append("No se han seleccionado videos.")
            return

        output_filename = self.output_name.text()
        if not output_filename:
            self.output_panel.append("Por favor, especifica un nombre de archivo de salida.")
            return

        # Deshabilitar el botón durante el proceso
        self.findChild(QPushButton, "Iniciar Unión").setEnabled(False)

        # Archivos temporales para cada video recodificado
        self.temp_files = []
        self.current_video_idx = 0

        # Comenzar la recodificación
        self.recencode_video(selected_videos[self.current_video_idx])

    def recencode_video(self, video):
        # Crear un archivo temporal
        temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
        self.temp_files.append(temp_file.name)

        # Comando de ffmpeg para recodificar el video
        temp_command = [
            "ffmpeg", "-y", "-loglevel", "info",
            "-i", video,
            "-vf", "scale=1280:720",
            "-c:v", self.video_codec_combo.currentText(),
            "-preset", self.preset_combo.currentText(),
            "-crf", "23",
            "-c:a", self.audio_codec_combo.currentText(),
            "-b:a", "128k",
            temp_file.name
        ]
        self.output_panel.append(f"Recodificando: {video}")
        self.output_panel.append(" ".join(temp_command))

        self.ffmpeg_worker = FfmpegWorker(temp_command)
        self.ffmpeg_worker.output_ready.connect(self.output_panel.append)
        self.ffmpeg_worker.finished.connect(self.on_ffmpeg_video_finished)
        self.ffmpeg_worker.start()

    def on_ffmpeg_video_finished(self, success):
        if not success:
            self.output_panel.append("Error en la recodificación de un video.")
            self.findChild(QPushButton, "Iniciar Unión").setEnabled(True)
            return

        self.current_video_idx += 1

        if self.current_video_idx < len(self.video_files):
            # Recodificar el siguiente video
            self.recencode_video(self.video_files[self.current_video_idx])
        else:
            self.process_temp_files(self.temp_files)

    def process_temp_files(self, temp_files):
        if len(temp_files) == 0:
            self.output_panel.append("Todos los videos han sido recodificados correctamente.")
            return

        # Crear archivo temporal de lista de concat
        concat_list_file = tempfile.NamedTemporaryFile(delete=False, mode="w", suffix=".txt")
        with open(concat_list_file.name, "w") as f:
            for temp_file in temp_files:
                f.write(f"file '{temp_file}'\n")

        output_filename = self.output_name.text()

        # Comando final para unir los videos usando el archivo de lista
        concat_command = [
            "ffmpeg", "-y", "-loglevel", "info",
            "-f", "concat", "-safe", "0", "-i", concat_list_file.name,
            "-c:v", "copy",  # Copy video to avoid re-encoding
            "-c:a", "copy",  # Copy audio to avoid re-encoding
            output_filename
        ]

        self.output_panel.append(f"Unificando videos: {concat_command}")
        self.ffmpeg_worker = FfmpegWorker(concat_command)
        self.ffmpeg_worker.output_ready.connect(self.output_panel.append)
        self.ffmpeg_worker.finished.connect(self.on_ffmpeg_finished)
        self.ffmpeg_worker.start()

    def on_ffmpeg_finished(self):
        self.findChild(QPushButton, "Iniciar Unión").setEnabled(True)
        self.output_panel.append("Proceso ffmpeg finalizado.")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = VideoMerger()
    window.show()
    sys.exit(app.exec_())

