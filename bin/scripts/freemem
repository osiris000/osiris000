#!/bin/bash

# Intervalo de tiempo entre cada ejecución en segundos
INTERVALO=300

# Porcentaje de memoria libre mínima requerida
PORCENTAJE_UMBRAL=5

# Memoria libre mínima fija (en MB)
MEMORIA_MINIMA_FIJA=256

# Archivo de log
LOGFILE="${OSIRIS000_BIN}/com/datas/freemem.log"

echo "FREEMEM LOG: $LOGFILE"

# Función para comprobar el estado del servidor gráfico y reiniciarlo si es necesario
comprobar_servidor_grafico() {
    if ! pgrep -x "Xorg" > /dev/null && ! pgrep -x "wayland" > /dev/null; then
        echo "$(date) - Servidor gráfico no encontrado, intentando reiniciar..." >> "$LOGFILE"
        reiniciar_servidor_grafico
    else
        if ! xdpyinfo > /dev/null 2>&1; then
            echo "$(date) - Servidor gráfico no responde, intentando reiniciar..." >> "$LOGFILE"
            reiniciar_servidor_grafico
        else
            echo "$(date) - Servidor gráfico funcionando correctamente." >> "$LOGFILE"
        fi
    fi
}

send_alert_to_monitoring() {
    # Función que envía un mensaje al sistema de monitoreo
    local message="$1"
    # Comando de ejemplo, reemplaza con la integración real
    echo "$message" >> "$LOGFILE"
}

matar_zombies() {
    echo "$(date) - Detectando procesos zombie..." >> "$LOGFILE"
    mapfile -t zombie_pids < <(ps -eo pid,ppid,state | awk '$3=="Z" {print $1}')

    if [ ${#zombie_pids[@]} -eq 0 ]; then
        echo "No se encontraron procesos zombie." >> "$LOGFILE"
    else
        for zombie_pid in "${zombie_pids[@]}"; do
            ppid=$(ps -p "$zombie_pid" -o ppid=)
            if [ -n "$ppid" ]; then
                handle_error "INFO[PS][0]: Proceso padre $ppid ha generado un zombie $zombie_pid."
                # Intentar notificar al proceso padre
                error_message=$(kill -SIGCHLD "$ppid" 2>&1)   # Captura cualquier mensaje de error
                if [ $? -ne 0 ]; then                        # Verifica si 'kill' falló
                    handle_error "WARM[PS][1]: $error_message"  # Escribe el mensaje en el log
                    error_message="WARM[PS][0]: No se pudo enviar SIGCHLD a $ppid. Es posible que se requieran permisos adicionales."
                    handle_error "$error_message"            # Llama a la función 'handle_error' con el mensaje de error
                    continue                                 # Continúa con la siguiente iteración del bucle
                fi
            fi
        done
    fi
}

# Función para reiniciar el servidor gráfico
reiniciar_servidor_grafico() {
    DISPLAY_MANAGER=$(cat /etc/X11/default-display-manager)
    echo "$(date) - Reiniciando el servidor gráfico..." >> "$LOGFILE"

    if [[ "$DISPLAY_MANAGER" == *"/lightdm" ]]; then
        sudo systemctl restart lightdm
    elif [[ "$DISPLAY_MANAGER" == *"/gdm3" ]]; then
        sudo systemctl restart gdm
    elif [[ "$DISPLAY_MANAGER" == *"/sddm" ]]; then
        sudo systemctl restart sddm
    else
        echo "$(date) - Gestor de display no soportado o no encontrado: $DISPLAY_MANAGER" >> "$LOGFILE"
    fi

    echo "$(date) - Servidor gráfico reiniciado." >> "$LOGFILE"
}



handle_error() {
    local error_message="$1"
    local message="$(date) - $error_message"
    send_alert_to_monitoring "$message"
    # Aquí puedes agregar acciones de recuperación si es necesario
}



# Bucle principal
while true; do


    echo "$(date) - ====================" >> "$LOGFILE"
    echo "$(date) - Comprobando Procesos..." >> "$LOGFILE"
    echo "$(date) - ====================" >> "$LOGFILE"


   # Comprobar el estado del servidor gráfico después de liberar memoria
    matar_zombies
 

    echo "$(date) - ====================" >> "$LOGFILE"
    echo "$(date) - Comprobando la memoria..." >> "$LOGFILE"
    echo "$(date) - ====================" >> "$LOGFILE"

    # Comprobar el estado del servidor gráfico antes de liberar memoria
    comprobar_servidor_grafico

    # Obtener la memoria total y la memoria libre actual (en MB)
    MEM_TOTAL=$(free -m | awk '/^Mem:/{print $2}')
    MEM_LIBRE=$(free -m | awk '/^Mem:/{print $7}')

    # Calcular el umbral de memoria libre en MB
    UMBRAL_MEMORIA=$(( MEM_TOTAL * PORCENTAJE_UMBRAL / 100 ))

    # Usar el mayor valor entre el umbral calculado y la memoria mínima fija
    MEM_UMBRAL_FINAL=$(( UMBRAL_MEMORIA > MEMORIA_MINIMA_FIJA ? UMBRAL_MEMORIA : MEMORIA_MINIMA_FIJA ))

    if [ "$MEM_LIBRE" -lt "$MEM_UMBRAL_FINAL" ]; then
        echo "$(date) - Memoria libre ($MEM_LIBRE MB) por debajo del umbral ($MEM_UMBRAL_FINAL MB). Liberando memoria..." >> "$LOGFILE"
        # Sincronizar el sistema de archivos
        sync

        # Liberar el caché de página, inodos y dentries
        echo 3 > /proc/sys/vm/drop_caches

        # Deshabilitar y habilitar swap
        swapoff -a && swapon -a
        # Ajustar swappiness (opcional)
        sysctl vm.swappiness=10

        # Mostrar estado de la memoria después de liberar
        echo "$(date) - Memoria después de liberar:" >> "$LOGFILE"
        free -m >> "$LOGFILE"
    else
        echo "$(date) - Memoria libre ($MEM_LIBRE MB) es suficiente. No se requiere liberación de memoria." >> "$LOGFILE"
    fi

    # Comprobar el estado del servidor gráfico
    comprobar_servidor_grafico
    echo "$(date) - ====================" >> "$LOGFILE"
    echo "$(date) - Esperando $INTERVALO segundos..." >> "$LOGFILE"
    echo "$(date) - ====================" >> "$LOGFILE"

    # Esperar el intervalo de tiempo especificado
    sleep $INTERVALO
done
