#!/bin/bash
#Habilita la salida al encontrar errores, pero con excepciones para comandos no críticos.
#set -e  #Comentado para un manejo de errores más granular.

# Recibe OSIRIS000_BIN como argumento
OSIRIS000_BIN="$1"

# --- Configuraciones ---
INTERVALO_SEGUNDOS=300          # Intervalo de tiempo entre cada ejecución (en segundos)
PORCENTAJE_MEMORIA_UMBRAL=5    # Porcentaje de memoria libre mínima requerida
MEMORIA_MINIMA_FIJA_MB=1024    # Memoria libre mínima fija (en MB)
CPU_UMBRAL_PORCENTAJE=80       # Umbral de uso de CPU (%) para alertas
MAX_TAMANO_LOG_BYTES=$((5 * 1024 * 1024))  # Tamaño máximo del archivo de log (5 MB)
LOGFILE="${OSIRIS000_BIN}/com/datas/freemem.log" # Ubicación del archivo de log
SWAPFILE="/swapfile"          # Ubicación del archivo de intercambio

# --- Funciones ---

# Activa el archivo de intercambio si existe y no está activo
swap_activate() {
  if [[ -f "$SWAPFILE" ]]; then
    if ! swapon --show | grep -q "$SWAPFILE"; then
      echo "$(date) - Activando archivo de intercambio: $SWAPFILE" >> "$LOGFILE"
      sudo swapon "$SWAPFILE" || handle_error "Error al activar el archivo de intercambio: $?"
    else
      echo "$(date) - Archivo de intercambio $SWAPFILE ya está activo." >> "$LOGFILE"
    fi
  else
    echo "$(date) - Archivo de intercambio $SWAPFILE no encontrado." >> "$LOGFILE"
  fi
}

# Mata procesos zombie
matar_zombies() {
    echo "$(date) - Detectando procesos zombie..." >> "$LOGFILE"
    mapfile -t zombie_pids < <(ps -eo pid,ppid,state | awk '$3=="Z" {print $1}')
    if [ ${#zombie_pids[@]} -gt 0 ]; then
        for zombie_pid in "${zombie_pids[@]}"; do
            ppid=$(ps -p "$zombie_pid" -o ppid=)
            if [ -n "$ppid" ]; then
                handle_error "INFO[PS][0]: Proceso padre $ppid $(ps -p $ppid -jfl) ha generado un zombie $zombie_pid."
                kill -SIGCHLD "$ppid" 2>/dev/null || handle_error "WARM[PS][1]: Error al enviar SIGCHLD a $ppid: $?"
            fi
            sudo kill -9 "$zombie_pid" 2>/dev/null || handle_error "Error al matar zombie $zombie_pid: $?"
        done
    else
        echo "No se encontraron procesos zombie." >> "$LOGFILE"
    fi
}


# Verifica el uso de CPU y reduce la prioridad de procesos con alto uso
check_cpu_usage() {
  echo "$(date) - Iniciando verificación de uso de CPU..." >> "$LOGFILE"
  local high_cpu_procs=$(ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | awk -v threshold="$CPU_UMBRAL_PORCENTAJE" '$NF >= threshold {print $1}' | tr '\n' ' ')
  if [[ -n "$high_cpu_procs" ]]; then
    echo "$(date) - Procesos con alto uso de CPU: $high_cpu_procs" >> "$LOGFILE"
    for pid in $high_cpu_procs; do
      if ps -p "$pid" > /dev/null; then
        echo "$(date) - Reduciendo prioridad del proceso $pid" >> "$LOGFILE"
        sudo ionice -c 3 -p "$pid" 2>/dev/null || handle_error "Error al cambiar la prioridad de I/O del proceso $pid: $?"
      fi
    done
  else
    echo "$(date) - No se encontraron procesos con alto consumo de CPU." >> "$LOGFILE"
  fi
}

# Comprobar y gestionar el servidor gráfico
comprobar_servidor_grafico() {
  echo "$(date) - Comprobando el servidor gráfico..." >> "$LOGFILE"
  if ! pgrep -x "Xorg" > /dev/null && ! pgrep -x "wayland" > /dev/null; then
    handle_error "Servidor gráfico no encontrado. Verifique la instalación y funcionamiento de Xorg o Wayland."
  else
    xdpyinfo > /dev/null 2>&1  # Redirect stdout to /dev/null
    if [[ $? -ne 0 ]]; then
      # Capture stderr only for error handling.  The error will already have been printed to stderr
      handle_error "Error en xdpyinfo:  Servidor gráfico con problemas. Reinicio recomendado."
      reiniciar_servidor_grafico
    else
      echo "$(date) - Servidor gráfico funcionando correctamente." >> "$LOGFILE"
    fi
  fi
}

# Reinicia el servidor gráfico.  Mejorado para manejar errores de systemctl
reiniciar_servidor_grafico() {
  echo "$(date) - Reiniciando el servidor gráfico..." >> "$LOGFILE"
  local DISPLAY_MANAGER=$(cat /etc/X11/default-display-manager 2>/dev/null || echo "Desconocido")
  case "$DISPLAY_MANAGER" in
    */lightdm*) sudo systemctl restart lightdm 2>/dev/null || handle_error "Error al reiniciar lightdm: $?" ;;
    */gdm3*) sudo systemctl restart gdm 2>/dev/null || handle_error "Error al reiniciar gdm: $?" ;;
    */sddm*) sudo systemctl restart sddm 2>/dev/null || handle_error "Error al reiniciar sddm: $?" ;;
    *) echo "$(date) - Gestor de display no soportado o no encontrado: $DISPLAY_MANAGER" >> "$LOGFILE" ;;
  esac
  echo "$(date) - Servidor gráfico reiniciado." >> "$LOGFILE"
}


# Limita el tamaño del archivo de log
limitar_tamano_log() {
  if [[ -f "$LOGFILE" ]]; then
    local FILE_SIZE=$(stat -c%s "$LOGFILE")
    if (( FILE_SIZE > MAX_TAMANO_LOG_BYTES )); then
      local BYTES_TO_KEEP=$((MAX_TAMANO_LOG_BYTES / 2))
      head -c "$BYTES_TO_KEEP" "$LOGFILE" > "$LOGFILE.tmp" && mv "$LOGFILE.tmp" "$LOGFILE" 2>/dev/null || handle_error "Error al recortar el log: mv falló"
      echo "$(date) - Archivo de log recortado. Tamaño actual: $(stat -c%s "$LOGFILE") bytes" >> "$LOGFILE"
    fi
  fi
}

# Manejo de errores centralizado.  Mejorado para incluir información más detallada
handle_error() {
  local message="$1"
  local line_number=$(caller 0 | awk '{print $1}')
  echo "$(date) - ERROR [Línea $line_number]: $message" >> "$LOGFILE"
  echo "$(date) - ERROR [Línea $line_number]: $message" >&2 #Salida a stderr
}

# --- Inicio del script ---

trap "handle_error 'Señal recibida. El script se detendrá.' ; exit 1" SIGTERM SIGINT

# Verifica si el archivo de log existe antes de limpiarlo.
if [[ -f "$LOGFILE" ]]; then
  echo -e "####### CLEAR LOG \n########################\n FREEMEM \n    $(date)       \n ################" > "$LOGFILE"
else
    touch "$LOGFILE"
    echo -e "####### CLEAR LOG \n########################\n FREEMEM \n    $(date)       \n ################" > "$LOGFILE"
fi

echo "====================" >> "$LOGFILE"
echo "Comprobando Swap..." >> "$LOGFILE"
swap_activate

# Bucle principal
while true; do
  check_cpu_usage
  matar_zombies
  echo "====================" >> "$LOGFILE"
  echo "$(date) - Comprobando la memoria..." >> "$LOGFILE"

  MEM_TOTAL=$(free -m --si | awk '/^Mem:/{print $2}')
  MEM_LIBRE=$(free -m --si | awk '/^Mem:/{print $7}')

  MEM_UMBRAL_FINAL=$(( (MEM_TOTAL * PORCENTAJE_MEMORIA_UMBRAL / 100) > MEMORIA_MINIMA_FIJA_MB ? (MEM_TOTAL * PORCENTAJE_MEMORIA_UMBRAL / 100) : MEMORIA_MINIMA_FIJA_MB ))

  if (( MEM_LIBRE < MEM_UMBRAL_FINAL )); then
    echo "$(date) - Memoria libre ($MEM_LIBRE MB) por debajo del umbral ($MEM_UMBRAL_FINAL MB). Liberando memoria..." >> "$LOGFILE"
    sync
    echo 3 > /proc/sys/vm/drop_caches 2>/dev/null || handle_error "Error al limpiar la caché"
    swapoff -a && swapon -a 2>/dev/null || handle_error "Error al deshabilitar/habilitar swap"
    sysctl vm.swappiness=10 
    if [ $? -ne 0 ]; then
      handle_error "Error al modificar vm.swappiness: $?"
    fi
  else
    echo "$(date) - Memoria libre ($MEM_LIBRE MB) suficiente. No se requiere liberación." >> "$LOGFILE"
  fi

  comprobar_servidor_grafico
  limitar_tamano_log
  echo "$(date) - Esperando $INTERVALO_SEGUNDOS segundos..." >> "$LOGFILE"
  sleep "$INTERVALO_SEGUNDOS"
done &

tail -f "$LOGFILE"
