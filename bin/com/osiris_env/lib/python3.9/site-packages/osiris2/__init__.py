
# Global dictionary to store process handlers
process_handlers = {}
my_process = {}
global lastpid



info = """

Modulo Osiris osiris2 - rst-

Multiprocess

etc...




"""


# osiris2.py


import os
# osiris2.py

import subprocess
import time

process_handlers = {}
process_counter = 0  # Autoincremento para los nombres de procesos

man = """
MANUAL:
multiprocess(obj)

obj es un diccionario que debe tener los siguientes campos:

- mode: 'fixed' o 'bg'
    * 'fixed': Ejecuta el proceso con un bucle while hasta que termine.
    * 'bg': Ejecuta el proceso en segundo plano y redirige la salida a /dev/null.
    
- name: Nombre del proceso (opcional)
    * Si no se proporciona, se generará un nombre automáticamente (p. ej. proceso_1).

- com: Lista de comandos (obligatorio)
    * Este campo es obligatorio. Si no se proporciona, el programa lanzará un error.

- metadata: Metadatos adicionales opcionales (diccionario)
    * Permite agregar datos como el usuario u otra información adicional.

Ejemplo de uso:
obj = {
    "mode": "fixed",
    "name": "mi_proceso",
    "com": ["ping", "-c", "4", "google.com"],
    "metadata": {"user": "john_doe"}
}
multiprocess(obj)
"""

class ProcessHandler:
    def __init__(self, name, process, metadata=None):
        self.name = name
        self.process = process
        self.metadata = metadata
        self.date = "2024-09-30"  # Ejemplo de un atributo adicional
        self.pid = process.pid  # Almacena el PID del proceso

    def is_running(self):
        # Verifica si el proceso sigue corriendo
        return self.process.poll() is None

    def read_output(self):
        # Lee la salida sin bloquear
        stdout = self.process.stdout.readline()
        if stdout:
            print(f"Output from {self.name}: {stdout.strip()}")

def start_process(name, command, cwd=".", metadata=None, mode="fixed"):
    global process_counter
    
    # Generar nombre automáticamente si no se proporciona
    if name is None:
        process_counter += 1
        name = f"proceso_{process_counter}"

    # Si el comando no está definido, notificar
    if not command:
        raise ValueError("Error: El campo 'com' es obligatorio y no puede estar vacío.")
    
    # Si el modo es 'bg' (background), redirigir la salida a /dev/null
    if mode == "bg":
        process = subprocess.Popen(command, cwd=cwd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    else:
        # En modo 'fixed', el proceso mantiene la salida accesible
        process = subprocess.Popen(command, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    
    # Crea el ProcessHandler con el proceso que acabas de iniciar
    handler = ProcessHandler(name, process, metadata)
    process_handlers[name] = handler  # Almacena el handler en el diccionario
    return handler

def multiprocess(obj):
    # Validar si obj tiene el campo 'com' (comando)
    if 'com' not in obj or not obj['com']:
        raise ValueError("Error: El campo 'com' (comando) es obligatorio.")
    
    # Asignar valores a las variables desde el objeto obj
    mode = obj.get('mode', 'fixed')  # Por defecto es 'fixed'
    name = obj.get('name', None)
    command = obj['com']
    metadata = obj.get('metadata', None)
    
    # Inicia el proceso
    handler = start_process(name, command, metadata=metadata, mode=mode)

    # Verifica si el handler fue creado exitosamente
    if handler is None:
        raise ValueError("Error: No se pudo iniciar el proceso. Verifique los parámetros.")

    # Si el modo es 'fixed', mantén el while y lee la salida
    if mode == 'fixed':
        print(f"Ejecutando el proceso {handler.name} (PID: {handler.pid}) en modo 'fixed'.")
        while handler.is_running():
            handler.read_output()
            time.sleep(0.1)  # Evita que el bucle sea demasiado agresivo
        print(f"Proceso {handler.name} (PID: {handler.pid}) terminado.")
    else:
        print(f"Proceso {handler.name} (PID: {handler.pid}) ejecutándose en segundo plano (modo 'bg').")


# Ejemplo de uso:
# obj = {
#     "mode": "fixed",
#     "name": None,
#     "com": ["ping", "-c", "4", "google.com"],
#     "metadata": {"user": "john_doe"}
# }
# multiprocess(obj)
